services:
  portainer:
    image: portainer/portainer-ce:latest
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: "host"
    ports:
      - "9443:9443"
    restart: always
    profiles:
      - infrastructure
      - fullstack
  database: # dont change name as this impacts host name for OPC scraper
    image: timescale/timescaledb-ha:pg17
    restart: always
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - timescaledb:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - opc-network
    env_file:
      - .env
    profiles:
      - opc
      - fullstack
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 3s
      timeout: 5s
      retries: 5
  dashboard:
    image: grafana/grafana
    restart: always
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana:/var/lib/grafana
    network_mode: "host"
    profiles:
      - infrastructure
      - fullstack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml  # Prometheus config filePrometheus web interface
    network_mode: "host"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    profiles:
      - infrastructure
      - fullstack
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: always
    command:
      - '--path.rootfs=/host'
    network_mode: "host"
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    profiles:
      - infrastructure
      - fullstack
  twingate_connector:
    container_name: ${CONTAINER_NAME1}
    image: twingate/connector:latest
    pull_policy: always
    environment:
      - SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      - TWINGATE_API_ENDPOINT=/connector.stock
      - TWINGATE_NETWORK=${TENANT_NAME}
      - TWINGATE_ACCESS_TOKEN=${ACCESS_TOKEN1}
      - TWINGATE_REFRESH_TOKEN=${REFRESH_TOKEN1}
      - TWINGATE_LOG_LEVEL=1
    restart: always
    env_file: .env
    network_mode: "host"
    profiles:
      - infrastructure
      - fullstack
  twingate_connector2:
    container_name: ${CONTAINER_NAME2}
    image: twingate/connector:latest
    pull_policy: always
    environment:
      - SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
      - TWINGATE_API_ENDPOINT=/connector.stock
      - TWINGATE_NETWORK=${TENANT_NAME}
      - TWINGATE_ACCESS_TOKEN=${ACCESS_TOKEN2}
      - TWINGATE_REFRESH_TOKEN=${REFRESH_TOKEN2}
      - TWINGATE_LOG_LEVEL=1
    restart: always
    env_file: .env
    network_mode: "host"
    profiles:
      - infrastructure
      - fullstack
  opc_server:
    build: ./services/opc_server/
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "4840:4840"
    profiles:
      - opc
      - fullstack
    networks:
      - opc-network
    depends_on:
      database:
        condition: service_healthy
  opc_scraper:
    build: ./services/opc_scraper/
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - opc-network
    profiles:
      - opc
      - fullstack
    depends_on:
      database:
        condition: service_healthy

volumes:
  grafana:
    driver: local
  opc-server:
    driver: local
  timescaledb:
    driver: local
  portainer:
    driver: local

networks:
  opc-network:
    driver: bridge